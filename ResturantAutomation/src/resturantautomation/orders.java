/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package resturantautomation;

import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.Socket;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import java.util.Timer;
import java.util.TimerTask;

/**
 *
 * @author Kevin Lin
 */
public class orders extends javax.swing.JFrame {
    ArrayList<String>orderList=new ArrayList<String>();
    Timer timer=new Timer();
    TimerTask task=new TimerTask()
    {
        public void run()
        {
            connectToServer();
        }
    };
    public orders() {
        initComponents();
        timer.scheduleAtFixedRate(task, 1000, 7000); //7000
        
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        doneButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(jList1);

        doneButton.setText("DONE");
        doneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneButtonActionPerformed(evt);
            }
        });

        backButton.setText("BACK");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(backButton, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                    .addComponent(doneButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(28, 28, 28))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 597, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(doneButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void doneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneButtonActionPerformed
    
        try {
            Socket sock=new Socket("192.168.43.56",1995);
            PrintStream PS=new PrintStream(sock.getOutputStream());
            /*PS.println("chef");*/
            
            InputStreamReader IR=new InputStreamReader(sock.getInputStream());
            BufferedReader BR=new BufferedReader(IR);
            
           
            
 
               
               DefaultListModel dlm=new DefaultListModel();

               
               if (orderList.size()!=0)
               {    
                   for (int i=0;i<orderList.size();++i)
                   {
                       
                       dlm.addElement(orderList.get(i));
                   }
                   String toRemove=jList1.getSelectedValue();
                   toRemove="!"+toRemove;
                   dlm.removeElement(jList1.getSelectedValue());
                   jList1.setModel(dlm);
                   PS.println(toRemove);
               }
       
            
            else
            {
               JOptionPane.showMessageDialog(null,"No order selected"); 
            }
            
        } catch (IOException ex) {
            Logger.getLogger(orders.class.getName()).log(Level.SEVERE, null, ex);
        }
       
    }//GEN-LAST:event_doneButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        Chef chefPage=new Chef();
        chefPage.setVisible(true);
        this.hide();
    }//GEN-LAST:event_backButtonActionPerformed
    

    private void connectToServer()
    {   
        /*ArrayList<String>orderList=new ArrayList<String>();*/
        orderList.clear();
        try {
            Socket sock=new Socket("192.168.43.56",1995);
            PrintStream PS=new PrintStream(sock.getOutputStream());
            PS.println("chef");
            
            InputStreamReader IR=new InputStreamReader(sock.getInputStream());
            BufferedReader BR=new BufferedReader(IR);
            
            String message=BR.readLine();
            
            if (message.equals("Chef Connected"))
            {   
               
               DefaultListModel dlm=new DefaultListModel();
               while(BR.ready())
               {
                   orderList.add(BR.readLine());
               }
               
               if (orderList.size()!=0)
               {    
                   for (int i=0;i<orderList.size();++i)
                   {
                       
                       dlm.addElement(orderList.get(i));
                   }
                   jList1.setModel(dlm);
               }
       
            }
            else
            {
               JOptionPane.showMessageDialog(null,"Not Connected"); 
            }
            
        } catch (IOException ex) {
            Logger.getLogger(orders.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    private void updateInventory(String in)
    {
        try
        {   
            String[] ingrList, qList;//declaring the lists for ingredients
            
            //sql connections
            Connection conn=DriverManager.getConnection("jdbc:mysql://resturantdb.cul7akmhbeku.us-west-2.rds.amazonaws.com:3306/menudb","root","password");
            Statement st =conn.createStatement();
            ResultSet rs = st.executeQuery("select * from menu where foodname = '"+in+"'"); //get the ingredients string, quantity string
            
            while (rs.next())
            {             
                ingrList = rs.getString(3).split(", "); //splitting the strings
                qList = rs.getString(5).split(", ");
                
                for(int i = 0; i < ingrList.length; i++) //handing each ingredient
                {
                    //sql connections
                    Connection connTemp=DriverManager.getConnection("jdbc:mysql://resturantdb.cul7akmhbeku.us-west-2.rds.amazonaws.com:3306/menudb","root","password");
                    Statement stTemp =connTemp.createStatement();
                    ResultSet rsTemp = stTemp.executeQuery("select * from ingredients where name = '"+ingrList[i]+"'");
                    if(rsTemp.last()) //ingredient found
                    {
                        int currentQuantity = Integer.parseInt(rsTemp.getString(2)) - Integer.parseInt(qList[i]); //calculating the amount of inventory left
                        stTemp.executeUpdate("update ingredients set quantity = '"+currentQuantity+"' where name = '"+ingrList[i]+"'");
                        if(currentQuantity <=0)
                        {
                            JOptionPane.showMessageDialog(null,ingrList[i] + " has run out!");
                        }
                    }
                    else //ingredient not found
                    {
                        stTemp.executeUpdate("insert into ingredients values('"+ingrList[i]+"', "+(-Integer.parseInt(qList[i]))+", 0)");
                        JOptionPane.showMessageDialog(null,"Ingredient not found, added to database with defaults.");
                    }
                }
            }
        } 
        catch (SQLException ex)
        {
            Logger.getLogger(inventory.class.getName()).log(Level.SEVERE,null,ex);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(orders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(orders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(orders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(orders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new orders().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JButton doneButton;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
