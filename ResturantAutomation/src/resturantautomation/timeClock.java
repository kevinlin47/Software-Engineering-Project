/*
Author:
Kimberly Ngai
Katie Bruett
 */
package resturantautomation;

//have employee enter id

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.sql.*;

//have two buttons (in and out)
//based on button pressed, check to make sure it wasn't pressed before (in and in)
/**
 *
 * @author kimberlyngai
 */
public class timeClock extends javax.swing.JFrame {

    /**
     * Creates new form timeClock
     */
    public timeClock() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        submitButton = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        returnButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        submitButton.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "In", "Out" }));

        jLabel1.setText("Employee ID:");

        jLabel2.setText("Punch Type:");

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 1, 20)); // NOI18N
        jLabel3.setText("Shift Reporting");

        returnButton.setText("Return");
        returnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addGap(3, 3, 3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(113, 113, 113))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(returnButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(submitButton)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(submitButton)
                    .addComponent(returnButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        // TODO add your handling code here:
        int emID = Integer.parseInt(jTextField1.getText());
        String eID = jTextField1.getText();
        String clockType = jComboBox1.getItemAt(jComboBox1.getSelectedIndex());
        //jTextField1.setText(clockType);
        
        boolean success = false;
        boolean existing = false;
        boolean flag = false;
        
        int dum = 0;
        
        boolean existingClock = false;
        
        //inital check to make sure ID exists
        try{
            Connection conn=DriverManager.getConnection("jdbc:mysql://resturantdb.cul7akmhbeku.us-west-2.rds.amazonaws.com:3306/employeeDB","root","password");
                  
            Statement st =conn.createStatement();
                        
            ResultSet rs = st.executeQuery("SELECT * FROM employeeRecords");
            
            while (rs.next())
            {
                if (eID.equals(rs.getString(1)))
                {
                    flag = true;
                }
            }
        }catch (SQLException ex)
            {   
                success=false;
                Logger.getLogger(addItem.class.getName()).log(Level.SEVERE,null,ex);
            }
        
        //punch in
        if (clockType.equals("In") && flag == true)
        {
            try{
                Connection conn=DriverManager.getConnection("jdbc:mysql://resturantdb.cul7akmhbeku.us-west-2.rds.amazonaws.com:3306/employeeDB","root","password");

                Statement st =conn.createStatement();

                //check to make sure ID isn't already clocked in
                ResultSet rs = st.executeQuery("SELECT * FROM employeeRecords WHERE lastPunch = 'OUT' OR lastPunch IS NULL");
                
                while (rs.next())
                {
                    if (eID.equals(rs.getString(1)))
                    {
                        Statement st1 = conn.createStatement();
                        String sqlStatment = "update employeeDB.employeeRecords set clockIn = Now(), lastPunch = 'IN' where employeeID = " +emID;

                        st1.executeUpdate(sqlStatment);
                        //System.out.println("clock in");
                        existing = true;
                        success = true;
                        //flag = false;
                        existingClock = false;
                    }
                    
                    else
                    {
                        //flag = true;
                        existingClock = true;
                    }
                }
                
                }catch (SQLException ex)
            {   
                success=false;
                Logger.getLogger(addItem.class.getName()).log(Level.SEVERE,null,ex);
            }
            
            if (success == false)
            {
                JOptionPane.showMessageDialog(null, "Already clocked in for this ID number.", null, JOptionPane.ERROR_MESSAGE);
            }
        }
                
        else if (clockType.equals("Out") && flag == true)
        {
            existing = false;
            existingClock = false;
             try{
                Connection conn=DriverManager.getConnection("jdbc:mysql://resturantdb.cul7akmhbeku.us-west-2.rds.amazonaws.com:3306/employeeDB","root","password");

                Statement st =conn.createStatement();

                ResultSet rs = st.executeQuery("SELECT * FROM employeeRecords WHERE lastPunch = 'IN'");
                
                while (rs.next())
                {
                    if (eID.equals(rs.getString(1)))
                    {
                        Statement st1 = conn.createStatement();
                        Statement st2 = conn.createStatement();
                        String sqlStatment = "update employeeDB.employeeRecords set clockOut = Now(), lastPunch = 'OUT' where employeeID = " +emID; 
                        st1.executeUpdate(sqlStatment);
                        String sqlStatment1 = "select clockIn, clockOut, totalHours, totalPay, hourlyRate from employeeDB.employeeRecords where employeeID=" +emID;
                        ResultSet rs1 = st2.executeQuery(sqlStatment1);
                        
                        if (rs1.next())
                        {
                            //System.out.println("hi");
                            sqlStatment = "update employeeDB.employeeRecords set hoursWorked = (timestampdiff(minute, clockIn, clockOut)/60.00), totalHours = totalHours+hoursWorked, totalPay = totalHours*hourlyRate where employeeID =" +emID;
                            st1.executeUpdate(sqlStatment);
                            //System.out.println("bye");
                            //sqlStatment = "update employeeDB.employeeRecords set clockIn = null, clockOut = null, hoursWorked = null where employeeID = " +emID;
                            //st1.executeUpdate(sqlStatment);
                        }
                        
                        existing = true;
                        success = true;
                        existingClock = false;
                    }
                    else
                    {
                        existingClock = true;
                        //flag = true;
                    }
                }
                
                }catch (SQLException ex)
            {   
                success=false;
                Logger.getLogger(addItem.class.getName()).log(Level.SEVERE,null,ex);
            }
            
            if (success == false)
            {
                JOptionPane.showMessageDialog(null, "Already clocked out for this ID number.", null, JOptionPane.ERROR_MESSAGE);
            }   
        }
        
        if (success == true && clockType.equals("In"))
        {
            JOptionPane.showMessageDialog(null, "Clock in successful");
        }
        else if (success == true && clockType.equals("Out"))
        {
            JOptionPane.showMessageDialog(null, "Clock out successful");
        }
        else if (flag == false)
        {
            JOptionPane.showMessageDialog(null, "Invalid ID number", null, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_submitButtonActionPerformed

    private void returnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnButtonActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_returnButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(timeClock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(timeClock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(timeClock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(timeClock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new timeClock().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton returnButton;
    private javax.swing.JButton submitButton;
    // End of variables declaration//GEN-END:variables
}
